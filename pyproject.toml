[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stock-screener"
version = "1.0.0"
description = "Stock Screener - Detect breakouts and volume spikes"
authors = [{name = "Stock Screener Team"}]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "pandas>=2.0.0",
    "yfinance>=0.2.18",
    "numpy>=1.24.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "requests>=2.28.0",
    "python-dateutil>=2.8.0",
]

[tool.ruff]
# Ruff configuration
target-version = "py39"
line-length = 88
exclude = [
    ".git",
    ".pytest_cache",
    ".venv",
    "venv",
    "__pycache__",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # use of assert detected
    "S301",  # use of pickle detected
]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.pytest_cache
  | \.venv
  | venv
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["models", "services", "gateways", "utils"]
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
mypy_path = "src"

[tool.mypy.module]
module = [
    "yfinance.*",
    "matplotlib.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", ".venv", "venv"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 80
exclude = ["setup.py", "docs", ".venv", "venv"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.pydocstyle]
inherit = false
convention = "google"
match-dir = "(?!tests).*"
match = "(?!test_).*\\.py"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src/models",
    "--cov=src/services", 
    "--cov=src/gateways",
    "--cov=src/utils",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--strict-markers",
    "--strict-config",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
] 